PREV_TOP12_NUMBER INTEGER,
PREGNANCY_BMI FLOAT,
PREGNANCY_FOLIC INTEGER,
PREGNANCY_TOPFA INTEGER,
PREGANCY_ART INTEGER,
PREGNANCY_OUTCOME_SOURCE_VALUE VARCHAR(50),
PREGNANCY_MODE_DELIVERY_SOURCE_VALUE VARCHAR(50),
FOREIGN KEY (PERSON_ID) REFERENCES person(PERSON_ID),
PRIMARY KEY (PREGNANCY_ID)
);
"
executeSql(connection, create_table_pregnancy_sql)
create_table_pregnancy_sql <- "
CREATE TABLE PREGNANCY_TABLE (
PERSON_ID INTEGER,
PREGNANCY_ID INTEGER NOT NULL,
PREGNANCY_START_DATE DATE NOT NULL,
PREGNANCY_END_DATE DATE NOT NULL,
PREGANCY_OUTCOME_ID VARCHAR (50),
PREGNANCY_MODE_DELIVERY VARCHAR(200),
GESTATIONAL_LENGHT_IN_DAY INTEGER NOT NULL NOT NULL,
PREGNANCY_SINGLE INTEGER NOT NULL,
PREGNANCY_MARITAL_STATUS INTEGER,
PREGNANCY_NUMBER_FETUSES INTEGER,
PREGNANCY_NUMBER_LIVEBORN INTEGER,
PREV_PREGNANCY_PARITY INTEGER,
PREV_PREGNANCY_GRAVIDITY INTEGER,
PREV_LIVEBIRTH_NUMBER INTEGER,
PREV_STILL_MISC_NUMBER INTEGER,
PREV_TOP_NUMBER INTEGER,
PREV_TOP12_NUMBER INTEGER,
PREGNANCY_BMI FLOAT,
PREGNANCY_FOLIC INTEGER,
PREGNANCY_TOPFA INTEGER,
PREGANCY_ART INTEGER,
PREGNANCY_OUTCOME_SOURCE_VALUE VARCHAR(50),
PREGNANCY_MODE_DELIVERY_SOURCE_VALUE VARCHAR(50),
FOREIGN KEY (PERSON_ID) REFERENCES person(PERSON_ID),
);
"
executeSql(connection, create_table_pregnancy_sql)
disconnect(connection)
closeAllConnections()
connectionDetails <- getEunomiaConnectionDetails()
connection <- connect(connectionDetails)
tabelas <- getTableNames(connection, databaseSchema = 'main')
length(tabelas)
create_table_pregnancy_sql <- "
CREATE TABLE PREGNANCY_TABLE (
PERSON_ID INTEGER,
PREGNANCY_ID INTEGER NOT NULL,
PREGNANCY_START_DATE DATE NOT NULL,
PREGNANCY_END_DATE DATE NOT NULL,
PREGANCY_OUTCOME_ID VARCHAR (50),
PREGNANCY_MODE_DELIVERY VARCHAR(200),
GESTATIONAL_LENGHT_IN_DAY INTEGER NOT NULL NOT NULL,
PREGNANCY_SINGLE INTEGER NOT NULL,
PREGNANCY_MARITAL_STATUS INTEGER,
PREGNANCY_NUMBER_FETUSES INTEGER,
PREGNANCY_NUMBER_LIVEBORN INTEGER,
PREV_PREGNANCY_PARITY INTEGER,
PREV_PREGNANCY_GRAVIDITY INTEGER,
PREV_LIVEBIRTH_NUMBER INTEGER,
PREV_STILL_MISC_NUMBER INTEGER,
PREV_TOP_NUMBER INTEGER,
PREV_TOP12_NUMBER INTEGER,
PREGNANCY_BMI FLOAT,
PREGNANCY_FOLIC INTEGER,
PREGNANCY_TOPFA INTEGER,
PREGANCY_ART INTEGER,
PREGNANCY_OUTCOME_SOURCE_VALUE VARCHAR(50),
PREGNANCY_MODE_DELIVERY_SOURCE_VALUE VARCHAR(50),
FOREIGN KEY (PERSON_ID) REFERENCES person(PERSON_ID),
PRIMARY KEY (PREGNANCY_ID)
);
"
executeSql(connection, create_table_pregnancy_sql)
create_table_infant_sql <- "
CREATE TABLE INFANT_TABLE(
PREGNANCY_ID INTEGER NOT NULL,
INFANT_ID INTEGER NOT NULL,
BIRTH_OUTCOME DATE,
BIRTH_WEIGHT INTEGER,
BIRTH_CON_MALFORMATION INTEGER,
BIRTH_SGA INTEGER,
BIRTH_FGR INTEGER,
BIRTH_APGAR INTEGER,
FOREIGN KEY (PREGNANCY_ID) REFERENCES PREGNANCY_TABLE(PREGNANCY_ID),
PRIMARY KEY (INFANT_ID)
)
"
executeSql(connection, create_table_infant_sql)
infant_table <- querySql(connection, 'SELECT * FROM INFANT_TABLE')
pregnancy_table <- querySql(connection, 'SELECT * FROM PREGNANCY_TABLE')
write.csv(socioeconomic_program, "C:/Users/danilo.dias/Documents/OMOP_ESTUDOS/csv/infant_table.csv", row.names=FALSE)
write.csv(pregnancy_table, "C:/Users/danilo.dias/Documents/OMOP_ESTUDOS/csv/pregancy_table.csv", row.names=FALSE)
executeSql(connection, deletion)
deletion <- "
DELETE FROM PERSON
"
executeSql(connection, deletion)
deletion <- "
DELETE * FROM PERSON
"
executeSql(connection, deletion)
deletion <- "
DELETE FROM PERSON
"
executeSql(connection, deletion)
deletion <- "
DELETE FROM PERSON WHERE RACE_SOURCE_VALUE = 'BLACK'
"
executeSql(connection, deletion)
selection <- "
SELECT * FROM PERSON WHERE RACE_SOURCE_VALUE = 'BLACK'
"
executeSql(connection, selection)
querySql(connection, 'SELECT * FROM PERSON')
querySql(connection, "SELECT * FROM PERSON WHERE RACE_SOURCE_VALUE == 'BLACK'")
querySql(connection, "SELECT * FROM PERSON WHERE RACE_SOURCE_VALUE == 'WHITE'")
disconnect(connection)
closeAllConnections()
load("~/OMOP_ESTUDOS/.RData")
load("~/OMOP_ESTUDOS/.RData")
library(DatabaseConnector)
library(Achilles)
library(Eunomia)
library(DatabaseConnector)
library(Achilles)
library(Eunomia)
connectionDetails <- getEunomiaConnectionDetails()
connection <- connect(connectionDetails)
tabelas <- getTableNames(connection, databaseSchema = 'main')
length(tabelas)
create_table_pregnancy_sql <- "
CREATE TABLE PREGNANCY_TABLE (
PERSON_ID INTEGER,
PREGNANCY_ID INTEGER NOT NULL,
PREGNANCY_START_DATE DATE NOT NULL,
PREGNANCY_END_DATE DATE NOT NULL,
PREGANCY_OUTCOME_ID VARCHAR (50),
PREGNANCY_MODE_DELIVERY VARCHAR(200),
GESTATIONAL_LENGHT_IN_DAY INTEGER NOT NULL NOT NULL,
PREGNANCY_SINGLE INTEGER NOT NULL,
PREGNANCY_MARITAL_STATUS INTEGER,
PREGNANCY_NUMBER_FETUSES INTEGER,
PREGNANCY_NUMBER_LIVEBORN INTEGER,
PREV_PREGNANCY_PARITY INTEGER,
PREV_PREGNANCY_GRAVIDITY INTEGER,
PREV_LIVEBIRTH_NUMBER INTEGER,
PREV_STILL_MISC_NUMBER INTEGER,
PREV_TOP_NUMBER INTEGER,
PREV_TOP12_NUMBER INTEGER,
PREGNANCY_BMI FLOAT,
PREGNANCY_FOLIC INTEGER,
PREGNANCY_TOPFA INTEGER,
PREGANCY_ART INTEGER,
PREGNANCY_OUTCOME_SOURCE_VALUE VARCHAR(50),
PREGNANCY_MODE_DELIVERY_SOURCE_VALUE VARCHAR(50),
FOREIGN KEY (PERSON_ID) REFERENCES person(PERSON_ID),
PRIMARY KEY (PREGNANCY_ID)
);
"
executeSql(connection, create_table_pregnancy_sql)
create_table_infant_sql <- "
CREATE TABLE INFANT_TABLE(
PREGNANCY_ID INTEGER NOT NULL,
INFANT_ID INTEGER NOT NULL,
BIRTH_OUTCOME DATE,
BIRTH_WEIGHT INTEGER,
BIRTH_CON_MALFORMATION INTEGER,
BIRTH_SGA INTEGER,
BIRTH_FGR INTEGER,
BIRTH_APGAR INTEGER,
FOREIGN KEY (PREGNANCY_ID) REFERENCES PREGNANCY_TABLE(PREGNANCY_ID),
PRIMARY KEY (INFANT_ID)
)
"
executeSql(connection, create_table_infant_sql)
infant_table <- querySql(connection, 'SELECT * FROM INFANT_TABLE')
pregnancy_table <- querySql(connection, 'SELECT * FROM PREGNANCY_TABLE')
Eunomia::exportToCsv(getwd())
tabelas <- getTableNames(connection, databaseSchema = 'main')
length(tabelas)
disconnect(connection)
closeAllConnections()
write.csv(socioeconomic_program, getwd(), row.names=FALSE)
# instalação de bibliotecas
remotes::install_github("ohdsi/DataQualityDashboard")
library(DataQualityDashboard)
inserting_data <- "
INSERT INTO INFANT_TABLE (
1, 1 , 2020/05/01, 1, 1 ,1, 1 ,1
)
"
executeSql(connection, inserting_data)
library(DatabaseConnector)
library(Achilles)
library(Eunomia)
library(DataQualityDashboard)
connectionDetails <- getEunomiaConnectionDetails()
connection <- connect(connectionDetails)
tabelas <- getTableNames(connection, databaseSchema = 'main')
length(tabelas)
create_table_pregnancy_sql <- "
CREATE TABLE PREGNANCY_TABLE (
PERSON_ID INTEGER,
PREGNANCY_ID INTEGER NOT NULL,
PREGNANCY_START_DATE DATE NOT NULL,
PREGNANCY_END_DATE DATE NOT NULL,
PREGANCY_OUTCOME_ID VARCHAR (50),
PREGNANCY_MODE_DELIVERY VARCHAR(200),
GESTATIONAL_LENGHT_IN_DAY INTEGER NOT NULL NOT NULL,
PREGNANCY_SINGLE INTEGER NOT NULL,
PREGNANCY_MARITAL_STATUS INTEGER,
PREGNANCY_NUMBER_FETUSES INTEGER,
PREGNANCY_NUMBER_LIVEBORN INTEGER,
PREV_PREGNANCY_PARITY INTEGER,
PREV_PREGNANCY_GRAVIDITY INTEGER,
PREV_LIVEBIRTH_NUMBER INTEGER,
PREV_STILL_MISC_NUMBER INTEGER,
PREV_TOP_NUMBER INTEGER,
PREV_TOP12_NUMBER INTEGER,
PREGNANCY_BMI FLOAT,
PREGNANCY_FOLIC INTEGER,
PREGNANCY_TOPFA INTEGER,
PREGANCY_ART INTEGER,
PREGNANCY_OUTCOME_SOURCE_VALUE VARCHAR(50),
PREGNANCY_MODE_DELIVERY_SOURCE_VALUE VARCHAR(50),
FOREIGN KEY (PERSON_ID) REFERENCES person(PERSON_ID),
PRIMARY KEY (PREGNANCY_ID)
);
"
executeSql(connection, create_table_pregnancy_sql)
create_table_infant_sql <- "
CREATE TABLE INFANT_TABLE(
PREGNANCY_ID INTEGER NOT NULL,
INFANT_ID INTEGER NOT NULL,
BIRTH_OUTCOME DATE,
BIRTH_WEIGHT INTEGER,
BIRTH_CON_MALFORMATION INTEGER,
BIRTH_SGA INTEGER,
BIRTH_FGR INTEGER,
BIRTH_APGAR INTEGER,
FOREIGN KEY (PREGNANCY_ID) REFERENCES PREGNANCY_TABLE(PREGNANCY_ID),
PRIMARY KEY (INFANT_ID)
)
"
inserting_data <- "
INSERT INTO INFANT_TABLE (
1, 1 , 2020/05/01, 1, 1 ,1, 1 ,1
)
"
executeSql(connection, create_table_infant_sql)
executeSql(connection, inserting_data)
inserting_data <- "
INSERT INTO INFANT_TABLE VALUES(
1, 1 , 2020/05/01, 1, 1 ,1, 1 ,1
)
"
executeSql(connection, inserting_data)
pregnancy_table <- querySql(connection, 'SELECT * FROM PREGNANCY_TABLE')
pregnancy_table
infant_table <- querySql(connection, 'SELECT * FROM INFANT_TABLE')
infant_table
inserting_data <- "
INSERT INTO INFANT_TABLE VALUES(
1, 1 , 2020-05-01, 1, 1 ,1, 1 ,1
)
"
executeSql(connection, inserting_data)
inserting_data <- "
INSERT INTO INFANT_TABLE VALUES(
2,2, 2020-05-01, 2, 2,2,2,2
)
"
executeSql(connection, inserting_data)
infant_table <- querySql(connection, 'SELECT * FROM INFANT_TABLE')
infant_table
disconnect(connection)
closeAllConnections()
library(DatabaseConnector)
library(Achilles)
library(Eunomia)
library(DataQualityDashboard)
connectionDetails <- getEunomiaConnectionDetails()
connection <- connect(connectionDetails)
tabelas <- getTableNames(connection, databaseSchema = 'main')
length(tabelas)
create_table_pregnancy_sql <- "
CREATE TABLE PREGNANCY_TABLE (
PERSON_ID INTEGER,
PREGNANCY_ID INTEGER NOT NULL,
PREGNANCY_START_DATE DATE NOT NULL,
PREGNANCY_END_DATE DATE NOT NULL,
PREGANCY_OUTCOME_ID VARCHAR (50),
PREGNANCY_MODE_DELIVERY VARCHAR(200),
GESTATIONAL_LENGHT_IN_DAY INTEGER NOT NULL NOT NULL,
PREGNANCY_SINGLE INTEGER NOT NULL,
PREGNANCY_MARITAL_STATUS INTEGER,
PREGNANCY_NUMBER_FETUSES INTEGER,
PREGNANCY_NUMBER_LIVEBORN INTEGER,
PREV_PREGNANCY_PARITY INTEGER,
PREV_PREGNANCY_GRAVIDITY INTEGER,
PREV_LIVEBIRTH_NUMBER INTEGER,
PREV_STILL_MISC_NUMBER INTEGER,
PREV_TOP_NUMBER INTEGER,
PREV_TOP12_NUMBER INTEGER,
PREGNANCY_BMI FLOAT,
PREGNANCY_FOLIC INTEGER,
PREGNANCY_TOPFA INTEGER,
PREGANCY_ART INTEGER,
PREGNANCY_OUTCOME_SOURCE_VALUE VARCHAR(50),
PREGNANCY_MODE_DELIVERY_SOURCE_VALUE VARCHAR(50),
FOREIGN KEY (PERSON_ID) REFERENCES person(PERSON_ID),
PRIMARY KEY (PREGNANCY_ID)
);
"
executeSql(connection, create_table_pregnancy_sql)
create_table_infant_sql <- "
CREATE TABLE INFANT_TABLE(
PREGNANCY_ID INTEGER NOT NULL,
INFANT_ID INTEGER NOT NULL,
BIRTH_OUTCOME DATE,
BIRTH_WEIGHT INTEGER,
BIRTH_CON_MALFORMATION INTEGER,
BIRTH_SGA INTEGER,
BIRTH_FGR INTEGER,
BIRTH_APGAR INTEGER,
FOREIGN KEY (PREGNANCY_ID) REFERENCES PREGNANCY_TABLE(PREGNANCY_ID),
PRIMARY KEY (INFANT_ID)
)
"
inserting_data <- "
INSERT INTO INFANT_TABLE VALUES(
1,1,'2014/05/01',1,1,1,1,1
)
"
executeSql(connection, create_table_infant_sql)
executeSql(connection, inserting_data)
infant_table <- querySql(connection, 'SELECT * FROM INFANT_TABLE')
infant_table
infant_table
querySql(connection, 'SELECT * FROM PERSON')
quweySql(connectionm 'DELETE FROM PERSON')
querySql(connection, 'DELETE FROM PERSON')
querySql(connection, 'SELECT * FROM PERSON')
executeSql(connection, 'DELETE * FROM PERSON')
executeSql(connection, 'DELETE FROM PERSON')
querySql(connection, 'SELECT * FROM PERSON')
querySql(connection, 'SELECT * FROM OBSERVATION')
executeSql(connection, 'DELETE FROM OBSERVATION')
querySql(connection, 'SELECT * FROM OBSERVATION')
querySql(connection, 'DELETE FROM main')
tabelas
for (i in range(tabelas)){
print(i)}
tabelas <- getTableNames(connection, databaseSchema = 'main')
length(tabelas)
for (i in range(tabelas)){
print(i)}
for (i in length(tabelas)){
print(i)}
for (i in tabelas){
print(i)}
library(string)
install.packages(string)
install.packages('string')
library(string)
install.packages('stringr')
install.packages("stringr")
library(stringr)
disconnect(connection)
closeAllConnections()
library(DatabaseConnector)
library(Achilles)
library(Eunomia)
library(DataQualityDashboard)
connectionDetails <- getEunomiaConnectionDetails()
connection <- connect(connectionDetails)
tabelas <- getTableNames(connection, databaseSchema = 'main')
length(tabelas)
for (i in tabelas){
table <- i
s <- 'DELETE FROM $table'
executeSql(connection, str_interp(s, table = i))}
for (i in tabelas){
table <- i
s <- 'DELETE FROM ${table}'
executeSql(connection, str_interp(s, table = i))}
library(DatabaseConnector)
library(Achilles)
library(Eunomia)
install.packages('stringr')
install.packages("stringr")
library(stringr)
connectionDetails <- getEunomiaConnectionDetails()
library(Eunomia)
library(Achilles)
library(DatabaseConnector)
connectionDetails <- getEunomiaConnectionDetails()
connection <- connect(connectionDetails)
tabelas <- getTableNames(connection, databaseSchema = 'main')
length(tabelas)
for (i in tabelas){
table <- i
s <- 'DELETE FROM ${table}'
executeSql(connection, str_interp(s, list(table=i)))}
Eunomia::exportToCsv('C:/Users/danilo.dias/Documents/OMOP_ESTUDOS/csv')
for (i in tabelas){
table <- i
s <- 'DELETE FROM ${table}'
executeSql(connection, str_interp(s, list(table=i)))}
disconnect(connection)
closeAllConnections()
library(DatabaseConnector)
library(Achilles)
library(Eunomia)
library(DataQualityDashboard)
library(stringr)
connectionDetails <- getEunomiaConnectionDetails()
connection <- connect(connectionDetails)
tabelas <- getTableNames(connection, databaseSchema = 'main')
length(tabelas)
for (i in tabelas){
table <- i
s <- 'DELETE FROM ${table}'
w <- 'SELECT * FROM ${table}'
saving <- "C:/Users/danilo.dias/Documents/OMOP_ESTUDOS/csv/${table}"
executeSql(connection, str_interp(s, list(table=i)))
table_to_save <- querySql(connection, str_interp(w, list(table=i)))
write.csv(table_to_save, str_interp(saving, list(table=i)), row.names=FALSE)
}
library(DatabaseConnector)
library(Achilles)
library(Eunomia)
library(DataQualityDashboard)
library(stringr)
connectionDetails <- getEunomiaConnectionDetails()
connection <- connect(connectionDetails)
tabelas <- getTableNames(connection, databaseSchema = 'main')
length(tabelas)
for (i in tabelas){
table <- i
s <- 'DELETE FROM ${table}'
w <- 'SELECT * FROM ${table}'
saving <- "C:/Users/danilo.dias/Documents/OMOP_ESTUDOS/csv/${table}.csv"
executeSql(connection, str_interp(s, list(table=i)))
table_to_save <- querySql(connection, str_interp(w, list(table=i)))
write.csv(table_to_save, str_interp(saving, list(table=i)), row.names=FALSE)
}
create_table_pregnancy_sql <- "
CREATE TABLE PREGNANCY_TABLE (
PERSON_ID INTEGER,
PREGNANCY_ID INTEGER NOT NULL,
PREGNANCY_START_DATE DATE NOT NULL,
PREGNANCY_END_DATE DATE NOT NULL,
PREGANCY_OUTCOME_ID VARCHAR (50),
PREGNANCY_MODE_DELIVERY VARCHAR(200),
GESTATIONAL_LENGHT_IN_DAY INTEGER NOT NULL NOT NULL,
PREGNANCY_SINGLE INTEGER NOT NULL,
PREGNANCY_MARITAL_STATUS INTEGER,
PREGNANCY_NUMBER_FETUSES INTEGER,
PREGNANCY_NUMBER_LIVEBORN INTEGER,
PREV_PREGNANCY_PARITY INTEGER,
PREV_PREGNANCY_GRAVIDITY INTEGER,
PREV_LIVEBIRTH_NUMBER INTEGER,
PREV_STILL_MISC_NUMBER INTEGER,
PREV_TOP_NUMBER INTEGER,
PREV_TOP12_NUMBER INTEGER,
PREGNANCY_BMI FLOAT,
PREGNANCY_FOLIC INTEGER,
PREGNANCY_TOPFA INTEGER,
PREGANCY_ART INTEGER,
PREGNANCY_OUTCOME_SOURCE_VALUE VARCHAR(50),
PREGNANCY_MODE_DELIVERY_SOURCE_VALUE VARCHAR(50),
FOREIGN KEY (PERSON_ID) REFERENCES person(PERSON_ID),
PRIMARY KEY (PREGNANCY_ID)
);
"
executeSql(connection, create_table_pregnancy_sql)
create_table_infant_sql <- "
CREATE TABLE INFANT_TABLE(
PREGNANCY_ID INTEGER NOT NULL,
INFANT_ID INTEGER NOT NULL,
BIRTH_OUTCOME DATE,
BIRTH_WEIGHT INTEGER,
BIRTH_CON_MALFORMATION INTEGER,
BIRTH_SGA INTEGER,
BIRTH_FGR INTEGER,
BIRTH_APGAR INTEGER,
FOREIGN KEY (PREGNANCY_ID) REFERENCES PREGNANCY_TABLE(PREGNANCY_ID),
PRIMARY KEY (INFANT_ID)
)
"
inserting_data <- "
INSERT INTO INFANT_TABLE VALUES(
1,1,'2014/05/01',1,1,1,1,1
)
"
executeSql(connection, create_table_infant_sql)
executeSql(connection, inserting_data)
infant_table <- querySql(connection, 'SELECT * FROM INFANT_TABLE')
infant_table
pregnancy_table <- querySql(connection, 'SELECT * FROM PREGNANCY_TABLE')
querySql(connection, 'SELECT * FROM PERSON')
write.csv(infant_table, "C:/Users/danilo.dias/Documents/OMOP_ESTUDOS/csv/infant_table.csv", row.names=FALSE)
write.csv(pregnancy_table, "C:/Users/danilo.dias/Documents/OMOP_ESTUDOS/csv/pregancy_table.csv", row.names=FALSE)
tabelas <- getTableNames(connection, databaseSchema = 'main')
length(tabelas)
disconnect(connection)
closeAllConnections()
